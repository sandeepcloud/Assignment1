import java.util.Iterator;
import java.util.TreeSet;
//Write java programs showing following functionalities using a TreeSet
public class Col4 {
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

		//to create a new tree set, add some random numbers (Integer) and print out the tree set.
		
		TreeSet t = new TreeSet();
		t.add(3);
		t.add(100);
		t.add(50);
		t.add(25);
		System.out.println(t);
		
		//to iterate through all elements in a tree set.
		Iterator i = t.iterator();
		while(i.hasNext())
		{
			System.out.println(i.next());
		}
		
		//to add all the elements of a specified tree set to another tree set.
		TreeSet t1 = new TreeSet();
		t1.add(35);
		t1.add(15);
		t1.add(20);
		t1.add(18);
		System.out.println(" New Treeset ="+t1);
		t.addAll(t1);
		System.out.println(t);
		
		//to create a reverse order view of the elements contained in a given tree set.
		Iterator i1 =t.descendingIterator();
		System.out.println("reverse Order ");
		while(i1.hasNext())
		{
			System.out.println(i1.next());
		}
		
		//to get the first and last elements in a tree set.
		System.out.println("First is "+t.first());
		System.out.println("Last is "+ t.last());
		
		//to get the number of elements in a tree set.
		System.out.println("No of elements in the treeset = "+t.size());
		
		//to find the numbers less than 7 in a tree set.
		Iterator<Integer> i2 = t.iterator();
		System.out.println("Number less than 7 ");
		
		while(i2.hasNext())
		{
			Integer j = i2.next();
			if(j<7)
			{
				System.out.println(j);
			}
		}
		
		//to get the element in a tree set which is greater than or equal to the given element.
		System.out.println("Greater than or equal to 25 : "+ t.ceiling(25));
		
		//to retrieve and remove the first element of a tree set.
		System.out.println(t.pollFirst());
		
		//to retrieve and remove the last element of a tree set.
		System.out.println(t.pollLast());
		
		//to remove a given element from a tree set.
		t.remove(25);
		System.out.println(t);
	}

}
